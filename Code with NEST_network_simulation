##################################################non_dale model#####################################################
###############file_1:params
N = 12500
E_l = -70. #mV
V_th = -55. #mV
V_reset = E_l
C_m = 250. #pF
tau_m = 10. #ms
I_e = 400. #pA
Je = 0.2 #mV
g = 6.
d = 0.1 #ms
T = 1000. #ms
#####################file_2:non_dela
import nest
from params import *
import numpy as np
import pylab
nest.ResetNetwork()
nest.ResetKernel()
nest.SetKernelStatus({'overwrite_files': True})

lumbda = 0.8
e = 0.1
K = int(e * N)
Ke = int(lumbda * K)
Ki = int((1-lumbda)*K)
Ji = -g * Je

ndict = {'I_e':I_e,'E_L':E_l,'tau_m':tau_m,'V_th':V_th,'C_m':C_m,'V_reset':V_reset}
neuronpop = nest.Create("iaf_psc_delta",N,params = ndict)
dVms = [{'V_m':V_reset+(V_th - V_reset)*np.random.rand()}for x in neuronpop]
nest.SetStatus(neuronpop,dVms)

conn_dict_ex = {"rule":"fixed_indegree","indegree":Ke}
conn_dict_in = {"rule":"fixed_indegree","indegree":Ki}
syn_dict_ex = {"delay":d,"weight":Je}
syn_dict_in = {"delay":d,"weight":Ji}

nest.Connect(neuronpop,neuronpop,conn_dict_ex,syn_dict_ex)
nest.Connect(neuronpop,neuronpop,conn_dict_in,syn_dict_in)

recdict = {'to_memory':True,'to_file':True,'label':'nondale',"withgid": True, "withtime": True}
spikedetector = nest.Create("spike_detector",params = recdict)
nest.Connect(neuronpop,spikedetector)

nest.Simulate(T)

###################file_3:dale
ndict = {'I_e':I_e,'E_L':E_l,'tau_m':tau_m,'V_th':V_th,'C_m':C_m,'V_reset':V_reset}
epop = nest.Create("iaf_psc_delta",Ne,params = ndict)
ipop = nest.Create("iaf_psc_delta",Ni,params = ndict)
dVms_e = V_reset+(V_th - V_reset)*np.random.rand(Ne)
nest.SetStatus(epop,"V_m",dVms_e)
dVms_i = V_reset+(V_th - V_reset)*np.random.rand(Ni)
nest.SetStatus(ipop,"V_m",dVms_i)

conn_dict_ex = {"rule":"fixed_indegree","indegree":Ke}
conn_dict_in = {"rule":"fixed_indegree","indegree":Ki}
syn_dict_ex = {"delay":d,"weight":Je}
syn_dict_in = {"delay":d,"weight":Ji}

#######################analysis
#A = pylab.np.loadtxt('nondale-12501-0.gdf')
A = pylab.np.loadtxt('dale-12501-0.gdf')

evs = A[:,0]
ts = A[:,1]
pylab.figure(1)
pylab.plot(ts, evs,".")

r = len(evs)/(N*T)
print "r = ",r

h = 10.
bins = np.arange(0,T,h)
hist,bin_edge = np.histogram(ts,bins)
left = bin_edge[:-1]
width = h
pylab.figure(2)
pylab.bar(left,hist,width)
pylab.show()

mean = np.mean(hist)
var = np.var(hist)
F = var/mean
print "F = ",F





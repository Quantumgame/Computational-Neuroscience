#use python to draw scatter plot and compute the coefficients of regression function
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats
x=np.array([-6,-2,0,0,8])
y=np.array([-5.5,-3.6,0.4,-2.6,8.8])
plt.scatter(x,y,label='original points')
plt.xlabel('x')
plt.ylabel('y')

beta0=scipy.stats.linregress(x,y)[1]#scipy.stats.linregress returns slope, intercept, r, p and stderr of correlation (ONLY linear regression)
beta1=scipy.stats.linregress(x,y)[0]
plt.plot(x,beta0+beta1*x,label='regression function')

plt.legend(loc='upper right')
plt.show()

#for non-linear regression, we use some transformation like replace y with log(y)
#y=a*exp^(b*x)
#log(y)=log(a)+b*x, now it is linear

#but when y=a*exp^(b*x)+c, log(y) can not be separated into two parts, so we use optimize function to estimate the coefficients
def e_func(x,a,b,c):
    return a*np.exp(-b*x)+c
betas, pcov = optimize.curve_fit(e_func, x,y)#in betas, we can obtain the coefficients

#multi-regression is not covered here
